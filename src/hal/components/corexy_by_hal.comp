// Based on a forum posting by nbremond
component corexy_by_hal "CoreXY kinematics";

pin in float  alpha_fb"typ: feedback from alpha motor controller";
pin in float  beta_fb "typ: feedback from beta  motor controller";

pin in float  j0_motor_pos_cmd"typ: from joint.0.motor-pos-cmd";
pin in float  j1_motor_pos_cmd"typ: from joint.1.motor-pos-cmd";

pin out float j0_motor_pos_fb"typ: to joint.0.motor-pos-fb";
pin out float j1_motor_pos_fb"typ: to joint.1.motor-pos-fb";

pin out float alpha_cmd"typ: command to alpha motor";
pin out float beta_cmd "typ: command to beta ts motor";

function _;
description """
Implement *CoreXY* forward and inverse transformations
*in HAL*.  This component provides an alternative
method for implementing *CoreXY* kinematics.

In the INI file, use:

[source,ini]
----
[KINS]
KINEMATICS=trivkins
coordinates=xyz
kinstype=both
----

This component accepts two joint (*j0*, *j1*) motor position commands for a
trivkins coordinates=xyz configuration and computes equivalent *CoreXY* motor
commands for two motors identified as *alpha*, *beta*.  Similarly, the
component accepts feedback values for the *alpha,beta* motor controllers and
converts to equivalent joint (*j0*, *j1*) motor position feedback values.

Notes:

1. Using *trivkins* with this module allows home switches to trigger according
to the *Cartesian x,y* positions

2. Joint pin names are based on *coordinates=xyz* and the corresponding joint
number assignments used by *trivkins* so *j0==x*, *j1==y* (see *trivkins*(9)).

3. *CoreXY* kinematics can also be implemented using the kinematics module
named *corexykins* with home switches triggered by the *j0*,*j1* *motor*
positions (see *kins*(9)).

""";

option period no;
license "GPL";
author "Dewey Garrett based on forum post from nbremond";
;;

FUNCTION(_) {

    // forward kinematics (j0==x,j1==y from motor positions):
    j0_motor_pos_fb = alpha_fb + beta_fb;
    j1_motor_pos_fb = alpha_fb - beta_fb;

    // inverse kinematics (motor positions from j0==x,j1==y):
    alpha_cmd = 0.5*(j0_motor_pos_cmd + j1_motor_pos_cmd);
    beta_cmd  = 0.5*(j0_motor_pos_cmd - j1_motor_pos_cmd);
}
