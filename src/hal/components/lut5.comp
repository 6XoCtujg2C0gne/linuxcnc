component lut5 """Arbitrary 5-input logic function based on a look-up table""";
pin in bit in_0;
pin in bit in_1;
pin in bit in_2;
pin in bit in_3;
pin in bit in_4;
pin out bit out;
param rw u32 function;
function _ nofp;
description """
*lut5*
constructs a logic function with up to 5 inputs using a **l**ook-**u**p **t**able.
The value for *function* can be determined by writing the truth table,
and computing the sum of *all* the *weights* for which the output value would be *TRUE*.
The weights are hexadecimal not decimal so hexadecimal math must be used to sum the weights.
A wiki page has a calculator to assist in computing the proper value for function.

https://wiki.linuxcnc.org/cgi-bin/wiki.pl?Lut5

Note that LUT5 will generate any of the 4,294,967,296
logical functions of 5 inputs so *AND*, *OR*, *NAND*,
*NOR*, *XOR* and every other combinatorial function is possible.

=== Example Functions
A 5-input *and* function is TRUE only when all the inputs are true, so the
correct value for *function* is *0x80000000*.

A 2-input *or* function would be the sum of *0x2* + *0x4* + *0x8*, so the
correct value for *function* is *0xe*.

A 5-input *or* function is TRUE whenever any of the inputs are true, so the
correct value for *function* is *0xfffffffe*. Because every weight except *0x1*
is true the function is the sum of every line except the first one.

A 2-input *xor* function is TRUE whenever exactly one of the inputs is true, so
the correct value for *function* is *0x6*.  Only *in-0* and *in-1* should be
connected to signals, because if any other bit is *TRUE* then the output will
be *FALSE*.

[cols="^1,^1,^1,^1,^1,>1"]
|===
6+^h|Weights for each line of truth table

^h|Bit 4
^h|Bit 3
^h|Bit 2
^h|Bit 1
^h|Bit 0
2+^h|Weight

|0|0|0|0|0|0x00000001
|0|0|0|0|1|0x00000002
|0|0|0|1|0|0x00000004
|0|0|0|1|1|0x00000008
|0|0|1|0|0|0x00000010
|0|0|1|0|1|0x00000020
|0|0|1|1|0|0x00000040
|0|0|1|1|1|0x00000080
|0|1|0|0|0|0x00000100
|0|1|0|0|1|0x00000200
|0|1|0|1|0|0x00000400
|0|1|0|1|1|0x00000800
|0|1|1|0|0|0x00001000
|0|1|1|0|1|0x00002000
|0|1|1|1|0|0x00004000
|0|1|1|1|1|0x00008000
|1|0|0|0|0|0x00010000
|1|0|0|0|1|0x00020000
|1|0|0|1|0|0x00040000
|1|0|0|1|1|0x00080000
|1|0|1|0|0|0x00100000
|1|0|1|0|1|0x00200000
|1|0|1|1|0|0x00400000
|1|0|1|1|1|0x00800000
|1|1|0|0|0|0x01000000
|1|1|0|0|1|0x02000000
|1|1|0|1|0|0x04000000
|1|1|0|1|1|0x08000000
|1|1|1|0|0|0x10000000
|1|1|1|0|1|0x20000000
|1|1|1|1|0|0x40000000
|1|1|1|1|1|0x80000000
|===

""";
see_also """
*and*(9),
*logic*(9),
*not*(9),
*or2*(9),
*xor2*(9).
""";
license "GPL";
author "Jeff Epler";
option period no;
;;

FUNCTION(_) {
    int shift = 0;
    if(in_0) shift += 1;
    if(in_1) shift += 2;
    if(in_2) shift += 4;
    if(in_3) shift += 8;
    if(in_4) shift += 16;

    out = (function & (1<<shift)) != 0;
}
